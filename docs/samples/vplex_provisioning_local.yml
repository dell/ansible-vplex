# VPlex Provisioning

---
- name: Perform VPlex provisioning
  hosts: localhost
  connection: local

  vars_files:
    - vars/connection.yml
    - vars/credentials.yml
    - vars/input_provisioning.yml

  vars:
    input: &connection_vars
      vplexhost: "{{ vplexhost }}"
      vplexuser: "{{ vplexuser }}"
      vplexpassword: "{{ vplexpassword }}"
      verifycert: "{{ verifycert }}"
      cluster_name: "{{ cluster_name }}"
    n: "{{ no_stor_vol }}"
    extent_list: []
    extent_list1: []

  collections:
    - dellemc.vplex

  tasks:
    - name: Rediscover StorageArray
      dellemc_vplex_array:
        <<: *connection_vars
        array_name: "{{ array_name }}"
        rediscover: true
      register: array_details

    - debug:
        msg: "{{ array_details }}"

    # This task returns the list of storage volumes that are unclaimed
    - name: List of all storage volumes that are unclaimed in a given cluster
      dellemc_vplex_gatherfacts:
        <<: *connection_vars
        gather_subset:
          - stor_vol
        filters:
          - filter_key: "use"
            filter_operator: "equal"
            filter_value: "unclaimed"
          - filter_key: "capacity"
            filter_operator: "lesser"
            filter_value: "10GB"
      register: volume

    - name: Claim first n Storage Volumes
      dellemc_vplex_storage_volume:
        <<: *connection_vars
        storage_volume_id: "{{ item }}"
        new_storage_volume_name: "sv_{{ ansible_date_time.epoch }}_{{ index }}"
        claimed_state: "claimed"
        state: "present"
      loop: "{{ volume.StorageVolumes[0:n] }}"
      loop_control:
        index_var: index
      register: volume_claimed_2

    - name: Get the storage volumes names
      set_fact:
        stor_vol: "{{ volume_claimed_2['results'] | map(attribute=
          'storage_details.name') | list }}"

    - name: Create extents
      dellemc_vplex_extent:
        <<: *connection_vars
        storage_volume_name: "{{ item }}"
        extent_name: "extent_ps_{{ cluster_name }}_{{ index }}"
        state: "present"
      loop: "{{ stor_vol }}"
      loop_control:
        index_var: index
      register: extent_det

    - name: Get the extent names
      set_fact:
        extent: "{{ extent_det['results'] | map(attribute=
          'extent_details.name') | list }}"

    - name: set_fact to split the even extents for device creation
      set_fact:
        extent_list: "{{ extent_list + [[extent[item], extent[item + 1]]] }}"
      loop: "{{ range(0, extent|length, 2) | list }}"
      when: extent|length % 2 == 0

    - name: set_fact to split the odd extents for device creation
      set_fact:
        extent_list1: "{{ extent_list1 + [[extent[item], extent[item + 1]]] }}"
      loop: "{{ range(0, extent|length - 1, 2) | list }}"
      when: extent|length % 2 != 0

    - name: set_fact to store last extent for odd extent
      set_fact:
        extent_list1: "{{ extent_list1 + [[extent[item]]] }}"
      loop: "{{ range(extent|length - 1,extent|length) | list }}"
      when: extent|length % 2 != 0

    - name: Create devices even
      dellemc_vplex_device:
        <<: *connection_vars
        device_name: "{{ extent[0] }}_dev_{{ index }}"
        extents: "{{ item }}"
        extent_state: "present-in-device"
        geometry: "{{ geometry }}"
        state: "present"
      loop: "{{ extent_list }}"
      loop_control:
        index_var: index
      when: extent|length % 2 == 0
      register: device_det

    - name: Get the even device names
      set_fact:
        device: "{{ device_det['results'] | map(attribute=
          'device_details.name') | list }}"
      when: extent|length % 2 == 0

    - name: Create devices odd
      dellemc_vplex_device:
        <<: *connection_vars
        device_name: "{{ extent[0] }}_dev_{{ index }}"
        extents: "{{ item }}"
        extent_state: "present-in-device"
        geometry: "{{ geometry }}"
        state: "present"
      loop:
        - "{{ extent_list1 }}"
      loop_control:
        index_var: index
      when: extent|length % 2 != 0
      register: device_det1

    - name: Get the device names
      set_fact:
        device: "{{ device_det1['results'] | map(attribute=
          'device_details.name') | list }}"
      when: extent|length  % 2 != 0

    - name: Get device details
      dellemc_vplex_device:
        <<: *connection_vars
        device_name: "{{ item }}"
        state: 'present'
      register: get_device
      loop: "{{ device }}"
      until: get_device.device_details.rebuild_status != "rebuilding"
      retries: 100
      delay: 5

    - name: Create virtual volumes
      dellemc_vplex_virtual_volume:
        <<: *connection_vars
        virtual_volume_name: "ansible_loc_vol_{{ index }}"
        supporting_device_name: "{{ item }}"
        thin_enable: true
        state: "present"
      with_items:
        - "{{ device }}"
      loop_control:
        index_var: index
      register: virt_vol

    - name: Get the virtual volume names
      set_fact:
        virtual_volumes: "{{ virt_vol['results'] | map(attribute=
          'storage_details.name') | list }}"

    - name: Register initiator
      dellemc_vplex_initiator:
        <<: *connection_vars
        initiator_name: "{{ initiator_name }}"
        port_wwn: "{{ port_wwn }}"
        registered: true
        state: "present"
      register: initiator

    - name: Create Storage View
      dellemc_vplex_storage_view:
        <<: *connection_vars
        storage_view_name: "{{ storage_view_name }}"
        ports: "{{ port_name }}"
        initiators: "{{ initiator_name }}"
        initiator_state: "present-in-view"
        virtual_volumes: "{{ item }}"
        virtual_volume_state: "present-in-view"
        state: "present"
      with_items:
        - "{{ virtual_volumes }}"
      register: storage_view